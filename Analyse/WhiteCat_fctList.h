// Source file : arduino_6_UNO.cpp =======================================================================================
int do_arduino_config(int cfg_X, int cfg_Y)
// Source file : arduino_core_6_UNO.cpp =======================================================================================
int do_arduino_draw_input()
int arduino_do_analog_in_whitecat()
int arduino_do_digital_in_whitecat()
int new_arduino_decode_array_method(unsigned char * tmp_ard)
int arduino_read()
int arduino_merge_and_do_data_out()//refonte en un seul tableau d'envoi DIGITAUX + PWM
void ticker_arduino()
END_OF_FUNCTION(ticker_arduino);
// Source file : arduino_device_core.cpp =======================================================================================
int arduino_init(int device)
int arduino_close(int device)
// Source file : audio_core5.cpp =======================================================================================
int Load_audiofiles_cues()
int AffectSoundFile(int player)
int do_audio_midi_function_next_prev_track()//christoph 22/04/14
int sound_core_processing()
int Control_Audio_thruth_faders(int ff, int dd, int typ)//typ 0 vol / 1 pan / 2 pitch
void ShowSupportedAudioDevices()
int InitSound()
int do_logical_fader_niveau_son(int xp, int yp, int numero)
int do_logical_lecteur_audio( int xp, int yp, int numero)
int do_logical_fenetre_audio(int xb,int yb)
// Source file : audio_visu4.cpp =======================================================================================
int fader_niveau_son(int xp, int yp, int numero)
int lecteur_audio( int xp, int yp, int numero)
int fenetre_audio(int xb,int yb)
// Source file : banger_core_8.cpp =======================================================================================
int Chrono_Reset()
int store_state_of_fader_before_bang(int fader_num)
int restore_state_of_fader_before_bang(int fader_num)
int Bang_event_back(int banger_num, int event_num)
int back_up_fader_if_a_fader_inside(int banger_num)
int do_send_bang()//remise à zéro du bang concerné pour le lancement depuis une mémoire
int Bang_event(int banger_num, int event_num)
int do_loop_bang(int banger_is)
int do_bang(int banger_is)
int do_go_back_bang(int banger_is)
int do_logical_feedback_banger(int xvis, int yvis)
int do_logical_fenetre_banger(int xb,int yb)
int refresh_banger_wx()
// Source file : banger_visu_8.cpp =======================================================================================
int alarm_window()
int feedback_banger(int xvis, int yvis)
int fenetre_banger(int xb,int yb)
// Source file : Call_everybody_5.cpp =======================================================================================
int reset_other_index_cfg()
int do_logical_FunctionBoxChannel(int fx,int fy, int flarg, int fhaut, int space)
int FunctionBoxChannel(int fx,int fy, int flarg, int fhaut, int space)
int do_logical_Menus( int xmenu, int ymenu)
int Menus( int xmenu, int ymenu)
// Source file : CFG_config_panel_8.cpp =======================================================================================
int init_kbd_custom()
int do_keyboard_config( int x_cfg,int y_cfg, int largeur_cfg, int hauteur_cfg)
int do_keyboard_conf(int cfgnetw_X, int cfgnetw_Y)//ancienne version
int do_core_config( int x_cfg_sc,int y_cfg_sc, int largeur_cfg_sc, int hauteur_cfg_sc)
int Box_artnet_udpport(int macx, int macy)
int do_network_config( int x_cfg_sc,int y_cfg_sc, int largeur_cfg_sc, int hauteur_cfg_sc)
int do_main_config(int cfgnetw_X, int cfgnetw_Y, int largeurCFGdmxwindow,int hauteurCFGdmxwindow)
int SelectDmxDevice(int interfacedmx)
int affect_dmx_in(int callb_x, int callb_y)
int do_dmx_config(int cfgdmx_X, int cfgdmx_Y, int largeurCFGdmxwindow,int hauteurCFGdmxwindow)
int save_network_settings()
int load_network_conf()
int do_panel_config(int cfg_X,int cfg_Y)
bool mouseOverTab_W_CFGMENU(int tabNum, int espace_au_bord_X, int espace_entre_onglet, int largeur_onglet, int hauteur_onglet, int espace_au_bord_Y)
int config_general_menu()
// Source file : CFG_screen.cpp =======================================================================================
int reload_window_positions()
int store_window_positions()
int do_screen_config( int x_cfg_sc,int y_cfg_sc, int largeur_cfg_sc, int hauteur_cfg_sc)
// Source file : channels_10_visu.cpp =======================================================================================
int ChannelScroller( int ScrollX, int ScrollY)
int ClassicalChannelSpace( int xchan, int ychan, int scroll)//les 512 circuits
int Draw_Channel_Preset_Title(int xchan, int ychan, int prst_v)
int Draw_Channel_Preset_View(int xchan, int ychan, int prst_v)
int ChannelsMenuSelection(int chx, int chy)
// Source file : channels_9_core.cpp =======================================================================================
int snap_channels_selection_array()//pour saisie continue des circuits, au click button
int channel_copy()
int channel_paste()
int reset_blind()
int Channel_select_all()
int Channel_select_inv()
int Channel_select_thruth(int fromch, int toch)
int Channel_at_level()
int DoMouseLevel()
int do_logical_ChannelScroller( int ScrollX, int ScrollY)
int do_logical_Draw_Channel_Preset_View( int xchan, int ychan,  int prst_v)
int do_logical_Draw_Channel_Preset_Title(int xchan, int ychan, int prst_v)
 return(0);
int do_logical_ChannelsMenuSelection(int chx, int chy)
// Source file : chasers_core_5.cpp =======================================================================================
int refresh_chaser_midi_out()
int set_refresh_mode_for_chaser(bool value)
int refresh_launchpad_on_chaser()
int chaser_calcul_time_joint(int numchaser)
int chaser_calcul_step(int numchaser, float ratio_for_no_reset)
int do_chaser()
int chaser_clear_preset(int numchaser, int presettrk)
int DoClearChaserTrack(int numchaser, int numtrack)
int DoClearAChaser(int numchaser)
int DoDockChaserTrack(int numchaser, int numtrack)
int chaser_load_from_preset(int numchaser, int presettrk)
int chaser_store_in_preset(int numchaser, int presettrk)
int DoModifyChaserTrack(int numchaser, int numtrack)
int DoReportChaserTrack(int numchaser, int numtrack)
int chaser_seek_at_beg(int numchase)
int chaser_select_all_track(int numchase)
int chaser_select_off_all_track(int numchase)
int chaser_select_inv_track(int numchase)
int chaser_select_no_track(int numchase)
int bouton_view_track_downup_core(int xcha, int ycha, bool state)
int bouton_view_launchpad_pos_core(int xcha, int ycha, bool state)
int Track_draw_logical(int xp, int yp,int num_track)
int do_logical_fenetre_chasers(int xcha,int ycha)
int set_chaser_tempo_unit( int the_chas)
int do_autolaunch()
int refresh_chaser_window_timeline_for_midi_out()
// Source file : chasers_visu.cpp =======================================================================================
int set_cue_in_view(int xp, int yp, bool state)
int set_cue_out_view(int xp, int yp, bool state)
int seek_cue_in_view(int xp,int yp, bool state)
int set_forward_sens_view(int xp, int yp, bool state)
int set_backward_sens_view(int xp, int yp, bool state)
int set_back_and_forward_sens_view(int xp, int yp, bool state)
int bouton_track_up(int xp, int yp,bool state)
int bouton_track_stay(int xp, int yp,bool state)
int bouton_track_down(int xp, int yp,bool state)
int bouton_view_track_downup(int xcha, int ycha, bool state)
int bouton_view_launchpad_pos(int xcha, int ycha, bool state)
int Track_draw(int xp, int yp,int num_track)
int chaser_window(int xcha,int ycha)
// Source file : CORE_6.cpp =======================================================================================
int reset_numeric_entry()
void write_text_to_log_file( const std::string &text )
void clear_log_file()
int return_lowest(int data1, int data2)
int return_highest(int data1, int data2)
int constrain_data_to_dmx_range(int valeur)
int constrain_data_to_midi_range(int valeur)
int unselect_ch_and_symbols()
int reset_temp_state_for_channel_macros_launch()
int fader_set_level(int cmptfader, int val)
int player1_do_stop()//fade out to avoid clipping in sound when stopping
int player2_do_stop()//fade out to avoid clipping in sound when stopping
int player3_do_stop()//fade out to avoid clipping in sound when stopping
int player4_do_stop()//fade out to avoid clipping in sound when stopping
bool check_channel_is_patched(int ch)
int constrain_int_data_to_this_range(int data, int min, int max)
int set_new_values_in_wave()
int clear_wave_buffer()
int clear_wave_brush(int preset)
int clear_wave_slots()
int wave_calculations()
int seek_to_beg_wave()
int check_echo_bounce_done(int ech)
int prepare_bounce(int ech)
int recall_channel_state_in_an_echo(int ech)
int snap_fader_state(int echo, int f)
int snap_kill_and_bounce(int echo, int f)
int record_channel_ch_state_in_an_echo(int ech, int cha)//par circuit
int record_channel_state_in_an_echo(int ech)
int clear_banger(int bg)
int recall_fader_state_echo(int f)
int clear_echo_levels(int ech)
int clear_ground_levels(int ech)
int clear_echo_preset(int ech)
int Draw_point_and_perform_level_on_area_NEW(int pr, int position_x, int position_y)
int recalculate_draw_sizes(int preset)
int draw_erase_drawing(int p)
int clear_draw_preset(int p)
int copy_banger(int source,int dest)
int reset_index_actions()
int reset_indexs_confirmation()
int affect_wave_to_dock(int fd,int dd)
int do_clock_level_modification(int level)
int reset_channel_first_dimmer_list()
int generate_channel_preview_patch_list()//affichage du premier grada
int check_presence_of_a_channel_in_views( int idch)
int check_wich_channel_is_in_view(int idch)//pour srcoll bar
int check_presence_of_any_channel_in_A_view(int v)
int check_presence_of_A_channel_in_A_view(int v, int ch)
int detect_last_activ_channel_in_activ_view(int v)
int toggle (int index_to_toggle)
int bounce(int b)
int count_number_of_channels_in_view(int view_is)
int refresh_positions_preset_view_poignee()
int clear_selection_in(int view_is)//groupes de vues
int build_preset_view_from_mem( int me, int view_is)
int build_preset_view_from_fader( int f, int view_is)
int reorder_channel_view_list_of_channels(int view_is)
int build_preset_view_from_all_existing_mems(int view_is)
int build_preset_view_from_all_faders(int view_is)
int build_preset_view_from_all_existing_mems_and_faders(int view_is)
int report_selection_in(int view_is)
int generate_channel_view_list_from_patched_circuits()
int record_selection_in(int view_is)//groupes de vues
int modify_selection_in(int view_is)//groupes de vues
int clear_plot_legend()
int affect_mover_to_fader(int thefader, int thedock)
int reset_error_on_save_load()
int detect_error_on_save_load()
int clear_report_string()
int clear_xyrelativ_preset(int pr)
int affect_preset_xy_to_symbols(int pr)
int record_preset_xy_from_symbol(int pr)
int clear_completely_the_patch()
int show_title()
int load_plan_of_theatre( char name_of_plan[256], bool rescan_width_eight)
int set_plot_background_to_default()
int refresh_shape_factors(int shapetype)
int set_all_faders_midi_out(bool state)
int refresh_all_midi_out_faders()
int reset_window_opened_indexes()
int constrain_banger_type(int lp)
int constrain_banger_param(int lp)
int reset_banger_params( int banger_selected, int event)
int reset_banger_event( int banger_selected, int event)
int reset_audio_indexs_to_dock()
bool set_all_saves_indexes_at(bool val)
int reset_modified_levels_in_crossfade()
int exclude_reinclude_channels_from_grand_master_action()
int set_new_time_in_tap_tempo()
int refresh_hauteur_fenetre_grider()
int reset_window_positions()
int Get_channels_from_memory(int the_mem)
int search_and_desaffect_previous_midi_signal(int typaction)
int reset_index_affect_midi()
void show_type_midi(int control, const std::string command)
int attribute_midi_to_control(int faderis, int typaction, int modeaction)
int attribute_midi_solo_affectation(int faderis, int modeaction)
int process_assign_to_core(int coreis)
int reset_and_recall_iCat_images()
int copy_iCatPage(int pagesource, int pagedest)
int clear_iCat_sliders( int preset_page_iCat)
int clear_iCat_buttons( int preset_page_iCat)
int clear_iCat_strings( int preset_page_iCat)
int clear_iCat_trackingzone(int preset_page_iCat)
int clear_iCat_page ( int preset_page_iCat)
int detect_actual_master_lock_is()
void save_load_print_to_screen(const std::string label)
int minifader_selection_record(int mf_preset_is)
int minifader_selection_clear(int mf_preset_is)
int minifader_lockselection_record(int mf_preset_is)
int refresh_stage()
int reset_indexes_conf()//menu setup cfg
int button_midi_out_core(int xmi, int ymi, int control)
int button_midi_out_visu(int xmi, int ymi, int control)
int show_who_is_in_dock (int fader, int thedokis)
int reset_check_grada_overide_dimmers()
int reset_all_bangers()//for load show and stop all running bangers
int reset_save_load_report_string()
int scan_audiofolder()
int snapshot_windows()
int close_all_windows()
int write_window_indexes_from_list_of_windows()
int rafraichissement_clockwheel()
int recall_windows()
int refresh_time_cursor()
int set_time_cursor_to_time_type(int the_time_wheel_datatype)
int read_time_string_entry()
int reset_midi_receiver_array()
int detect_master_lock(int mo)
int do_lock_preset(int num_preset)
int do_stock_fadersstate(bool fads, bool speeds, bool locks, bool lfos, bool loops)
int do_recall_fadersstate(bool fads, bool speeds, bool locks, bool lfos, bool loops)
int dessafect_index_curves()
int reconstruct_plot_dimmer_list_from_patch()
int patch_straight()
int patch_select_all_dimmers()
int patch_clear_selected()
int patch_to_default_selected()
int set_channel_scroll( int ch)
int set_patch_scroll( int dim)
int load_Fader_state_to_midi_array()
short midi_send_program_change(int lechannel, short prg_)
int send_my_midi_note( int letype, int lechannel, int lanote, int lavelocite, int laduree)
int send_my_midi_note_delayed( int letype, int lechannel, int lanote, int lavelocite, int laduree, int delay)
int send_immidiateley_my_midi_cc( int letype, int lechannel, int lanote, int lavelocite)
int midi_send_type_message(int msgmidi)
int emit_midi_out()
int load_etat_picker_dans_dockcolor(int dcolor_selected )
int refresh_ocv_settings()
int refresh_decay()
int LoadWhiteCatColorProfil()
int record_memory(int mem_is)
int refresh_mem_onstage(int mem_is)
int record_memory_plus_faders(int mem_is)
int overrecord_memory_plus_faders(int mem_is)
int snap_mem_to_copy()
int copy_mem_in(int mem_n)//recopie d une memoire dans l autre
int prepare_crossfade()
int detect_mem_before_one()
int detect_mem_preset()
int detect_next_mem(int mem_to_detect)//pour import ascii Anton 4 avril 2015
int detect_mem_preset_previous()
int detect_next_preset()
int refresh_mem_onpreset(int mem_is)
int create_memory(int mem_to_create)
int create_memory_plus_faders(int mem_to_create)
int delete_memory(int mem_to_delete)
int refresh_integrated_gridplayer1()
int do_load_mem_preset_while_crossfade(int mem_is)
int do_double_go_function()
int do_go_back_function()
int do_go_function()
int patch_unselect_all_dimmers()
int build_default_curve(int curve)
int set_to_default_my_roi(int dkprpreset, int dkpr)
int set_to_default_my_trackers()
int set_to_default_this_tracker(int Tcker)
int write_show_coming_from()
int scan_for_free_dock()
int detect_dock_used(int numfad)
int refresh_minifader_state_view_core(int cmptfader)
int do_action_on_selected_minifaders(int action)
int match_minifaders()
int affect_time_entry_to_mem(int index_t,int mem_set_to_time)
int do_sprintf_job()//report du calcul des affichages de temps dans la boucle des 10�me de scondes
int remember_config_page()
int window_who_is_on_top()
int substract_a_window(int id)
int clear_ip_artnet()
int GlobInit()
int reset_show()
int substract_channel_selection_to_layers_plot()
// Source file : dmx_enttec_pro.cpp =======================================================================================
int Enttec_Pro_SetCommParams()
int Enttec_Pro_SendData(int label, unsigned char * data, unsigned int length, LPOVERLAPPED lpOverlapped)
int Enttec_Pro_SetCommParamsIN()
uint16_t Enttec_Pro_ReceiveData(uint16_t label, uint8_t * data, uint32_t expected_length)
int Detect_EnttecProOut()
int Open_EnttecProOut()
int Close_EnttecProOut()
int Detect_EnttecProIn()
int Open_ProIn()
int Close_ProIn()
// Source file : dmx_functions_14.cpp =======================================================================================
int Init_A_specific_dmx_interface(int i)
int Init_dmx_interface()
int Close_A_specific_dmx_interface(int i)
int Close_dmx_interface()
int check_if_dmx_change()
int SendData_to_interface()
int Attribute_ArtNet(int aff, int ddok)
int refresh_modified_levels_in_crossfade()
int do_crossfade()
int do_goback()
int prepare_lfos(int cmptfader, int dksel)
int do_lfos()
int Merger_Faders()
int calculs_etats_faders_et_contenus()
int Merger_Sequenciel()
int Merger()
int load_dmx_conf()
int Save_my_dmx_conf()
int Receive_DMX_IN()
// Source file : dmx_sunlite.cpp =======================================================================================
typedef int (CALLBACK * DasUsbCommand)(int command, int param, unsigned char * bloc );
int close_sunlite()
int sunlite_send_data()
int Receive_sunlite_dmxIN()
int reset_dmx_out()
// Source file : Draw3.cpp =======================================================================================
int snap_state_of_draw_grid(int pr)
int merge_draw_and_grid_player(int pr)
int Draw_TrackingAera(int xw,int yw)
int Draw_Window(int xw,int yw)
int do_logical_Draw_TrackingAera(int xw,int yw)
int do_logical_Draw_Window(int xw,int yw)
// Source file : echo3.cpp =======================================================================================
int do_bouncing_levels(int ech)
int do_echo()
int do_logical_Echo_Aera(int xe, int ye)
int do_logical_echo_window(int xe, int ye)
int Echo_Aera(int xe, int ye)
int echo_window(int xe, int ye)
// Source file : faders_core_24.cpp =======================================================================================
int indicate_wich_fader_is_the_highest()
int asservissement_gridplayer(int cmptfader, int dk)
int DoLock(int masterfader, int locklevel)
int do_logical_fader_damper_commands(int _x,int _y, int fd)
return(0);
int do_logical_lfo_fader_functions (int cmptfader, int x, int y,int largeur, int espacement)
int do_logical_MoveFaderSpace(int ydelimitation)
int do_logical_Touche_Midi_Mute(int xmute, int ymute)
int do_logical_FaderSpace(int x, int y,int largeur, int espacement, int nbr_fader)
// Source file : faders_operations.cpp =======================================================================================
int Unselect_other_docks(int themaster, int thedock)
int DoTimeToDock(int faa,int docc)
int ClearDock(int fad, int dk)
int affect_echo_to_dock(int echo, int ff, int dd)
int affect_draw_preset_to_dock(int pr,int ff, int dd)
int ClearFader(int fad)
int record_minifaders_selected_as_fgroup(int fd, int dk)
int affect_selected_faders_to_fgroup(int fd, int dk)
int DoDock(int fad, int dk)
int DoModify(int fad, int dk)
int DoReport(int fad, int dk)
int affect_color_to_dock(int fa, int doc)
int affect_network_to_dock(int faa, int docc)
int affect_dmxIN_to_dock(int faa, int docc)
int affect_video_tracking_to_dock(int faa, int docc)
int affect_audio_control_to_dock(int faa, int docc)
int affect_chaser_to_dock(int chas, int fd,int dk )
int Unselect_all_channels()
int affect_color_to(int dockC_sel,int couleur)
int affect_to_tracker(int dock_selected,int tracker_selected)
int do_direct_channel(int fad,int dk)
// Source file : faders_visuels_26.cpp =======================================================================================
int fader_damper_commands(int _x,int _y, int fd)
int lfo_fader_functions (int cmptfader, int x, int y, int espacement)
int MoveFaderSpace(int ydelimitation)
int Touche_Midi_Mute(int xmute, int ymute)
int Lock_Preset_Call(int xf,int yf)
int Commandes_faders_generales(int xf, int yf)
int FaderSpace(int x, int y, int espacement,int nbr_fader)
// Source file : gestionaire_fenetres2.cpp =======================================================================================
int reset_config_indexes()
int clear_non_desired_values_in_window_list()
int initialisation_tableau_windows()
int check_nbre_opened_windows()
int add_a_window(int id)
int initiate_windows()
int window_bring_to_front(int num_window)
int check_save_load_report_window()
// Source file : grand_master.cpp =======================================================================================
int do_logical_grand_master(int GMX, int GMY, int larg)
int grand_master(int GMX, int GMY)
// Source file : graphics_rebuild1.cpp =======================================================================================
int RetourInfos(int x_info,int y_info)
int show_windows_list_id(int x_info, int y_info)
int Boxes()
void Procedure(const std::string title,const std::string subtitle)
int DoMouse()
// Source file : grider8.cpp =======================================================================================
int TheStepBox(int xb,int yb, int num_grid_player)
int TheGrid_commands ( int xb, int yb, int num_grid_player)
int TheGrid_divers( int xb, int yb, int num_grid_player)
int TheGrid_matrix ( int xb, int yb,int num_grid_player)
int ThePlayCommands(int xb, int yb, int num_grider)
int TheCallGridBox(int xb, int yb, int num_grider)
int Grid_player(int xb, int yb, int num_grider)
int GlobalGridViewer(int xb, int yb)
int Grider_Box(int xb, int yb)
// Source file : grider_calculs8.cpp =======================================================================================
int affichage_time_format(float time_in_sec)
int refresh_step_in_player(int grid_number, int num_step, int grider_player)
int clear_a_grid_step(int grid_number, int num_step)
int clear_part_of_a_grid(int grid_number, int num_stepfrom, int num_stepto)
int clear_a_grid(int grid_number)
int copy_grid_partially(int from_grid_number, int from_num_step,int to_step_number, int dest_grid_number, int dest_num_step)
int copy_step_to_step(int from_grid_number, int from_num_step, int dest_grid_number, int dest_num_step)
int insert_steps(int dest_grid_number, int from_num_step, int dest_nbr_step)
int gridder_prepare_cross(int grid_pl, int gr_actual_grid, int gr_actual_step)
int do_grid()
int gridplayer_step_minus(int num_grid_player)
int gridplayer_step_plus(int num_grid_player)
int gridplayer_seek(int num_grider)
// Source file : grider_core8.cpp =======================================================================================
int do_logical_TheStepBox(int xb,int yb, int num_grid_player)
int do_logical_TheGrid_commands ( int xb, int yb, int num_grid_player)
int do_logical_TheGrid_matrix ( int xb, int yb,int sizecase, int num_grid_player)
int do_logical_TheGrid_divers( int xb, int yb, int num_grid_player)
int do_logical_ThePlayCommands(int xb, int yb, int num_grider)
int do_logical_TheCallGridBox(int xb, int yb, int num_grider)
int do_logical_Grid_player(int xb, int yb, int num_grider)
int do_logical_GlobalGridViewer(int xb, int yb, int taillecase)
int do_logical_Grider_Box(int xb, int yb)
// Source file : gui_boutons_rebuild1.cpp =======================================================================================
int bouton_on_view(int xp, int yp, bool state)
void bouton_text_view(int xp, int yp,const std::string dex, bool state)
float do_logical_rotatif(int xr, int yr, int Rrayon)
int rotatif(int xr, int yr, int Rrayon, float valeur)
int play_button_view(int xp, int yp, bool state)
int seek_button_view(int xp,int yp, bool state)
int loop_button_view(int xp,int yp, bool state)
int playstop_button_view(int xp, int yp, bool state)
int autolaunch_button_view(int xp,int yp, bool state)
int next_button_view(int xp, int yp, bool state)
int previous_button_view(int xp,int yp, bool state)
int case_moins_view(int xp,int yp, bool state)
int case_plus_view(int xp,int yp, bool state)
void toggling_bar_view(int xp,int yp, bool state, const std::string titre)
int pulse_bar_view(int xp,int yp, char * titre)
int raccrochage_midi_logical_vertical_dmx(int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_visuel_vertical_dmx (int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_visuel_vertical_dmx_inverted (int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_logical_vertical(int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_visuel_vertical (int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_logical_horizontal_audio(int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_visuel_horizontal_audio (int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_logical_horizontal(int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_visuel_horizontal (int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_logical_horizontal_little(int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_visuel_horizontal_little (int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_logical_circulaire(int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int raccrochage_midi_visuel_circulaire (int Xb, int Yb, int IDmidi, int largeur, int hauteur)
int midi_send_faders_button_logical(int Xb, int Yb, int id_window)
int midi_send_faders_button_visuel(int Xb, int Yb)
void command_button_view( int xcom, int ycom, int isstate, const std::string desc, const std::string shortcut, int IDmidi)
void command_button_logical( int xcom, int ycom, int isstate, const std::string desc, const std::string raccourci, int IDmidi, int thecommand)
// Source file : iCat14.cpp =======================================================================================
int init_iphone_fonts()
int init_iCat_data()
int fermeture_client_iCat()
int initialisation_clientserveur_iCat()
int fermeture_clientserveur_iCat()
int Menu_edition_iCat_sliders(int xed, int yed)
int Menu_edition_iCat_boutons(int xed, int yed)
int Menu_edition_iCat_strings(int xed, int yed)
int Point_Viewing(int macx,int macy)
int Tablier_GUI_editor( int gx, int gy)
int Menu_edition_tracking_zone(int xed,int yed)
int BoxGuiBuilder_iCat ( int gx, int gy)
int BoxiCat ( int macx, int macy)
int reset_button(int page, int but, int tp)
int check_button( int tp)
int check_slider( int tp)
int check_tracker_zone( int tp)
int DoJobFantastickTouch()
int ReceiveFantastick()
// Source file : icat_core14.cpp =======================================================================================
int recalculate_iCatBuilder_window_size()
int reset_previous_levels_infos()
int load_iCat_page ( int preset_page_iCat)
int refresh_continuously_iCat_trackerzones()
int refresh_continuously_iCat_sliders()
int refresh_check_buttons()
int refresh_continuously_iCat_buttons()
int To_iCat_DrawSlider(int id, int x1,int y1, int affectation, int valeur_sl)
int To_iCat_DrawButton(int id, int x1,int y1, int affectation, int action, int valeur_b)
int To_iCat_DrawTrackingZone(int id, int x1,int y1, int xtrackertodraw, int ytrackertodraw)
int To_iCat_DrawString(int id, int x1,int y1, int affectation, int action)
int Fantastick_check_string()
int do_refresh_iCat(int iCatPage)
// Source file : Kalman.cpp =======================================================================================
Kalman::Kalman()
void Kalman::setFactors(double q, double r, double p)
void Kalman::init(double x)
void Kalman::setProcessNoiseCovariance(double i)
void Kalman::setMeasurementNoiseCovariance(double i)
void Kalman::setEstimatiomErrorCovariance(double i)
void Kalman::reset()
double Kalman::kalmanUpdate(double measurement)
// Source file : keyboard_functions2.cpp =======================================================================================
int generation_Tableau_noms_clavier_FR()
int check_channel_minus()
int check_channel_plus()
int select_channel_minus()
int select_channel_plus()
int key_switch_window_up()
int key_switch_window_down()
int key_affectation()
int key_add_ch()
int key_minus_ch()
int key_up()
int key_down()
int key_unselect_ch()
int key_thruth()
int key_go()
int key_presetvideo(int preset)
int key_roi(int roi)
int key_full()
int key_time_in()
int key_time_out()
int key_time_in_out()
int key_at_zero()
int key_select_inv()
int key_backward()
int key_forward()
int key_select_all()
int key_left()
int key_right()
int key_printscreen()
// Source file : keyboard_routines2.cpp =======================================================================================
int recall_config_page()
int commandes_clavier()//la fonction sprintf tue l acces clavier
// Source file : list_proj_core.cpp =======================================================================================
int do_the_macro_of_the_channel(int the_chan, int num_macro)
int do_channels_macro()
int Channel_macros_core(int xlist, int ylist)
int do_logical_liste_projecteurs(int xlist,int ylist)
// Source file : list_proj_visu.cpp =======================================================================================
int Channel_macros_visu(int xlist, int ylist)
int liste_projecteurs(int xlist,int ylist)
// Source file : logicals_intres.cpp =======================================================================================
int entetes_confirmation()
int operations_confirmation()
int fenetre_confirm()
// Source file : MAIN_janv_2014_opensource_kbd.cpp =======================================================================================
std::vector<SmoothData> Fader_dampered(48);
std::vector<Kalman> Arduino_Kalman(analog_limit);
END_OF_FUNCTION(ticker_midi_clock);
END_OF_FUNCTION(ticker_WAVE);
void ticker_dmxIn() // nettoyage des ticker pour verifier stabilit�
END_OF_FUNCTION(ticker_dmxIn);
END_OF_FUNCTION(ticker);
void my_callback(int flags) {
END_OF_FUNCTION(my_callback);
END_OF_FUNCTION(dixiemes_de_secondes);
END_OF_FUNCTION(ticker_full_loop);
END_OF_FUNCTION(ticker_artnet);
int main_actions_on_screen()
int main() {
END_OF_MAIN()
// Source file : midi_13.cpp =======================================================================================
int do_midi_call_order(int control)
int do_midi_job(int control)
int ventilate_midi_to_midiarray()
int ventilation_midi_sur_crossfade()
int simulate_midi(int letype,int lechan, int lepitch, int lavaleur)
int add_to_midi_historic()//just a visual monitoring
static char * EvAquire ( MidiEvPtr e)
pascal void Display ( MidiEvPtr e)
pascal void DisplayTask (short ref)
pascal void MSALARMAPI ReceivePolling ( long date, short r, long a, long b, long c)
pascal void MSALARMAPI ReceiveEvents(short r)
int PrintSlotsInfosDevices(short driverRef)
int midi_change_signal(int xrep, int yrep)
int midi_list_and_choose_devices()
int midi_historic_part(int _x,int _y)
int midipage_affectation(int cfg_midiX,int cfg_midiY, int largeurCFGmidi,int hauteurCFGmidi)
int refresh_launchpad_color_callibration()
int midi_launchpad_colors(int cfg_midiX,int cfg_midiY)
int clock_wheel (int xw,int yw, int rayon_k, float angle_correction)
int midi_clock_part(int _x,int _y)
int midipage_preset_and_options(int cfg_midiX,int cfg_midiY, int largeurCFGmidi,int hauteurCFGmidi)
int midipage_devices(int cfg_midiX,int cfg_midiY, int largeurCFGmidi,int hauteurCFGmidi)
int do_midi_config(int cfg_midiX,int cfg_midiY, int largeurCFGmidi,int hauteurCFGmidi)
// Source file : midi_CORE.cpp =======================================================================================
pascal void MSALARMAPI ReceiveEvents(short r);
int InitTblLibEv() {
pascal void InstallFilter( short refNum, MidiFilterPtr filter )
int InitMidi()
int QuitMidi()
// Source file : midi_launchpad.cpp =======================================================================================
int define_colors()
int launchpad_set_led(int control, int color)
int launchpad_set_bool_value(int control,int value)
int launchpad_set_zero_value(int control)//extinction led
int launchpad_refresh_buffer_led()
int reset_launchpad()
// Source file : minifaders_core.cpp =======================================================================================
int all_at_zero_panel_core(int xf, int yf)
int mini_faders_panel_core(int xmf, int ymf, int larg)
// Source file : minifaders_visu.cpp =======================================================================================
int draw_sign_up(int xs,int ys)
int draw_sign_down(int xs,int ys)
int draw_sign_saw(int xs,int ys)
int draw_sign_prev(int xs,int ys)
int draw_sign_next(int xs,int ys)
int draw_sign_up_down(int xs, int ys)
int show_fgroup_in_minifaders_window(int xs, int ys, int fad, int dk)
int all_at_zero_panel_visu(int xf, int yf)
int mini_faders_panel_visu(int xmf, int ymf, int larg)
// Source file : mover_2013.cpp =======================================================================================
int reset_memoires()
int ClearGotoStep(int move_selected)
int ClearIntoStep(int move_selected)
int convert_bytes_to_int( BYTE bHaut, BYTE bBas)
int Move_refresh_xy(int move_selected)
int prepare_move_values(int move_selected)//prepa du crossfade
int Clear_the_Move(int move_selected)
int Move_AddStep(int move_selected)
int Move_RecStep(int move_selected)
int Move_DelStep(int move_selected)
int Move_StepBackward(int move_selected)
int Move_StepForward(int move_selected)
int Move_Autostop(int move_selected)
int MoveAffectGoto(int move_from, int move_to)
int inversion_of_axes()
int SetAllParams(int move_selected)
int ImportMoveInMyDock(int move_selected)
int TimeShift(int move_selected)
int Print_Points(int move_selected)
int reset_mover_buffer()
int param_editor(int xt, int yt)
int mover_box(int x_track,int y_track)
int Move_do_crossfade(int move_selected)//crossfades
int ventilation_niveaux_mover()
// Source file : mover_spline6.cpp =======================================================================================
fixed node_dist(NODE n1, NODE n2)
NODE dummy_node(NODE node, NODE prev)
void calc_tangents(void)
void get_control_points(NODE n1, NODE n2, int points[8])
void get_control_points_backward(NODE n1, NODE n2, int points[8])
void draw_spline(NODE n1, NODE n2)
int draw_splines(int move_selected)
int ShowSpline(int move_selected)
int Prepare_Cross_Spline(int move_selected)
// Source file : my_window_file_sample.cpp =======================================================================================
int do_logical_my_window_Box(int mx, int my)
int my_window_Box(int mx, int my)
// Source file : network_artnet_3.cpp =======================================================================================
short StyleNode = 0; // Responder is a Node (DMX <-> Ethernet Device)
int diodes_artnet(int x_diods, int y_diods)
int light_temoin_universe(int incoming_artnet, int x_diods, int y_diods)
int light_temoin_emission(int outgoing_artnet, int x_diods, int y_diods)
int reset_poll_list()
int show_artpoll_reply(int apr_X, int apr_Y)
int init_artnet_variables()
 int DoArtPollReply()
int ReceiveArtDmx()
int load_artnet_conf()
int save_artnet_conf()
int detection_reseaux()
int initialisation_serveur_artnet()
int fermeture_serveur_artnet()
int detection_mise_en_place_carte_reseaux()
int initialisation_client_artnet()
int fermeture_client_artnet()
int ConstructArtPoll()
int ArtDmx()
int ConstructArtPollReply ()//size 250
int AnalyseArtPollReply()
// Source file : network_MAC_adress_3.cpp =======================================================================================
int Box_IP_routing ( int macx, int macy)
int do_artnet_affect_config(int cfgnetw_X, int cfgnetw_Y)
// Source file : numpad_core.cpp =======================================================================================
int do_wheel_level_job(int levelwheelis)
int level_wheel_core (int xw,int yw, int rayon_k, float angle_correction)
int do_logical_visual_numeric_pad (int x_num, int y_num)
// Source file : numpad_visuel.cpp =======================================================================================
int rafraichissement_padwheel()
int level_wheel (int xw,int yw, int rayon_k, float angle_correction)
int visual_numeric_pad (int x_num, int y_num)
// Source file : patch_core.cpp =======================================================================================
int do_curve_affectation()
int load_curve_in_temp_curve()
int check_dimmer_minus_override()
int check_dimmer_plus_override()
int do_logical_menu_curve(int XCurv, int YCurv)
int do_logical_PatchBox(int XChan, int YChan, float scroll_chan)
// Source file : patch_splines_2.cpp =======================================================================================
fixed curve_node_dist(curve_node n1, curve_node n2)
curve_node dummy_curve_node(curve_node curve_Node, curve_node prev)
void curve_calc_tangents(void)
void curve_get_control_points(curve_node n1, curve_node n2, int points[8])
int write_curve()
int draw_curve_node(int n)
int curve_draw_splines()
int view_curve_after_draw()//verif du report de ma courbe
int SplineCurve()
int build_square_curve(int curve)
int build_fluo_curve(int curve)
int build_preheat_curve(int curve)
int build_inverse_curve(int curve)
// Source file : patch_visu.cpp =======================================================================================
int menu_curve(int XCurv, int YCurv)
int PatchBox(int XChan, int YChan, float scroll_chan)
// Source file : plot9.cpp =======================================================================================
int draw_channel_of_symbol( int calc, int symb, int plotx, int ploty)
int draw_gels_of_a_symbol(int calc, int symb, int plotx, int ploty)
int draw_line_to_channel_of_symbol(int x1, int y1, int x2, int y2, int way)//way= 0 left to right 1= Right to left 2= up to down 3= down to up
int plot_draw_symbol_pc( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_fresnel( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol , int plot_calc_number_is)
int plot_draw_symbol_decoupe_etc_1(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_decoupe_etc_2(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_decoupe_etc_3(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_decoupe_1(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_decoupe_2(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_decoupe_3(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Par_1( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Par_2( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Par_3( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Par_4( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Horiziode_assym( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Horiziode_sym( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_BT( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_T8( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Blinder( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_Svoboda( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_ACL( int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_fluo_little(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_fluo_big(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_FollowSpot1(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_FollowSpot2(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_VP1(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_VP2(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_slideprojector(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_retroprojector(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_barndoors(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_top_hat(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_color_extender(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_colorchanger(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_jalousie(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_iris(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_goboholder(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_shutter(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_motorized_mirror(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_platine_de_sol(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_littlestand(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_bigstand(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_barre_de_couplage(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_echelle(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_pont50_1m(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_pont50_3m(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_pont50_jonction(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_pont30_1m(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_pont30_3m(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_pont30_jonction(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_smokemachine(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_fogmachine(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_direct(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_serviceligth(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_draw_symbol_dimmerline(int plotx, int ploty, float size_symbol, float angle_pc, int num_symbol, int plot_calc_number_is)
int plot_print_neutral_symbol(int s, int plotx, int ploty)
int plot_symbol_list(int plotx,int ploty)
int plot_draw_shape_line(int plotx1, int ploty1, int plotx2, int ploty2, float sizeshape, float alphashape, int colorpattern, bool isselected)
int plot_draw_shape_stripline(float plotx1, float ploty1, float plotx2, float ploty2, float sizeshape, float alphag,int typeofline,int colorpattern, bool isselected, bool show_handle)
int plot_draw_rectangle(int plotx1, int ploty1, float shapesizex, float shapesizey, float shaperotation, float alphashape, int colorpattern, bool isselected)
int plot_draw_shape_curtain(int plotx1, int ploty1, int plotx2, int ploty2, float sizeshape, float alphashape,int colorpattern, bool isselected)
int plot_draw_circle(int plotx1, int ploty1, float sizeshape, float alphashape,  int colorpattern, bool isselected)
int plot_draw_slice(int plotx1, int ploty1, float sizeshape, float opening_angle, float shaperotation, float alphashape,  int colorpattern, bool isselected)
int plot_draw_polygon(int plotx1, int ploty1, float sizeshape, float shaperotation,int numPoints, float alphashape,  int colorpattern, bool isselected)
void plot_draw_text(int plotx,int ploty, int fontsize,int fonttype, const std::string label,float alphatext, bool isselected)
int plot_shape_list(int plotx,int ploty)
int shape_edition(int plotx, int ploty)
int symbol_edition_options(int plotx, int ploty)
int plot_symbol_edition(int plotx,int ploty)
int plot_menu_bar(int plotx, int ploty)
void deroule_repertoire_plans(int xrep, int yrep, const std::string label)
int menu_plan(int plotx, int ploty)
int plot_draw_plan_grid_for_view_point(int plotx, int ploty, int viewpx, int viewpy)
int plot_draw_shapes(int plotx, int ploty)
int plot_draw_plan(int plotx, int ploty, int plot_calc_number_is)
int plot_draw_levels(int plotx, int ploty, int plot_calc_number_is)
int plot_draw_plan_bitmap(int xplot, int yplot, float alphaplan)
int plot_draw_legend(int xplot, int yplot)
int plot_legend_menu(int xplot, int yplot)
int Plot_window(int plotx, int ploty)
// Source file : plot_core9.cpp =======================================================================================
int do_a_screen_capture()
int do_plot_screen_capture(char capturename[25])
int right_click_on_plot()
int plot_reset_list_gelat()
int plot_reset_list_appareils()
int plot_generate_gels_list()
int plot_generate_appareils_list()
int scan_planfolder()//plot
int add_channel_selection_to_layers_plot()
int change_shape_type(int shapetype)
int group_ungroup_selected_shapes()
int refresh_opening_angle(float openingangle)//arc case 9
int affect_angle_to_shapes(float a)
int affect_polygon_nbr_of_corners(int brches)
int clear_shape_slot(int s)
int unselect_all_shapes()
int affect_size_to_shape(float size)
int affect_font_to_texts(int ftt )
int affect_color_pattern_to_shape(int colorpattern)
int affect_size_to_rect(float sizex, float sizey)
int copy_shape_to_emply_slot(int empty, int filled)
int rearrange_shapes()
int snapshot_shapes()
int delete_selected_shapes()
int refresh_view_shape_params(int sh)
int check_select_deselect_shape(int posx, int posy)
int store_plot_position_of_shapes()
int add_shape_to_plot(int shapetype)
int exchange_shape_position(int pos_source, int pos_dest)
int position_down_selected_shapes()
int add_selected_shapes()
int position_on_top_selected_shapes()
int search_affect_first_dimmer_to_symbole(int calc, int symb)
int reset_symbols_selected(int calc)
int change_symbol_type(int calc, int typ)
int repatch_from_plot(int calc)
int store_plot_position_of_activ_calc(int calc)
int clear_grouped_to_symbols(int calc, int s)
int clear_symbol_slot(int calc, int s)
int recount_symbols_on_calc(int calc)
int clear_calc(int calc)
int add_a_symbol_to_plot(int plot_calc_number_is)
int duplicate_selected_symbols(int calc)
int snapshot_calc(int calc)
int copy_symbol_to_emply_slot(int calc, int empty, int filled)
int reorder_plan(int the_calc)
int delete_selected_symbols(int calc)
int add_selected_symbols_to_calc(int calc)
int exchange_symbol_position(int calc,int pos_source, int pos_dest)
int send_symbols_from_calc_to_calc(int calc_source,int calc_dest)
int position_down_selected_symbols(int calc)
int position_on_top(int calc)
int group_symbols_selected(int calc)
int duplicate_selected_shapes()
int store_relativ_xy_position_of_activ_calc(int calc)
int store_relativ_xy_position_of_shape()
int check_select_deselect_symbol(int posx, int posy)
int affect_angle_to_symbols(int plot_calc_number_is,float angle_is)
int edit_symbol_name()
int edit_shape_name()
int plot_align_x(int calc)
int plot_align_y(int calc)
int plot_ventilate_x(int calc)
int plot_ventilate_y(int calc)
int plot_shapes_align_x()
int plot_shapes_align_y()
int plot_shapes_ventilate_x()
int plot_shapes_ventilate_y()
int logical_plot_symbol_list(int plotx, int ploty)
int logical_plot_shape_list(int plotx, int ploty)
int logical_shape_edition(int plotx, int ploty)
int logical_symbol_edition_options(int plotx, int ploty)
int logical_plot_symbol_edition(int plotx, int ploty)
int logical_plot_menu_bare(int plotx,int ploty)
int logical_deroule_repertoire_plans(int xrep, int yrep)
int logical_menu_plan(int plotx, int ploty)
int do_logical_Plot_window(int plotx, int ploty)
// Source file : procs_visuels_rebuild1.cpp =======================================================================================
bool wc_askConfirmWindowIsOpen()
int detection_over_window()
int move_window(int idwindowis)
int MoveCloseBox(int xmv,int ymv, int idwindow)
int do_logical_MoveCloseBox(int xmv,int ymv, int idwindow)
int logical_channelspace()
int check_graphics_mouse_handling()
// Source file : saves_export_import.cpp =======================================================================================
int do_reset_all_listproj()
int do_ASCII_import()
int do_ASCII_export()
int do_Schwartzpeter_import()
int do_Alq_import()
// Source file : saves_export_pdf2.cpp =======================================================================================
error_handler (HPDF_STATUS  error_no,
void draw_numpage(HPDF_Page page, float x, float y, const char * str_numpage)
int verification_fin_de_page()
void draw_fleche_link (HPDF_Page  page,
void draw_title (HPDF_Page  page,
void draw_info (HPDF_Page  page,
void draw_section (HPDF_Page  page,
void saut_de_page()
bool check_there_is_someone_in_grid(int grd)
int pdf_draw_little_gridplayer(HPDF_REAL xx, HPDF_REAL yy)
int pdf_draw_channels_on_grid(HPDF_REAL xx, HPDF_REAL yy, int gr, int ste)
int pdf_draw_infos_of_step(HPDF_REAL xx, HPDF_REAL yy,int grd,int stp)
int draw_pdf_gridayer_state( int grd)
int draw_pdf_grid(int grd, HPDF_REAL xx, HPDF_REAL yy)
int draw_pdf_echo_config()
int draw_pdf_draw_config()
int draw_pdf_grid_players_config()
int draw_pdf_chaser(int chaser_num, HPDF_Page  page)
int generate_list_midi_for_pdf()
int print_ch_macro( int cp)
int print_ch_from_plot( int ch)
int print_midi_command(int idMidi)
int draw_pdf_icat_preset(int prst)
int do_pdf_export()
// Source file : saves_menu_8.cpp =======================================================================================
int scan_savesfolder()
void scan_importfolder(const char * subdir)
int choose_personnal_preset_binary_save_load(int xs,int ys)
int do_logical_choose_personnal_preset_binary_save_load(int xs,int ys)
int check_import_type()
void deroule_repertoire_export_import(int xrep, int yrep, const std::string label)
void do_logical_deroule_repertoire_export_import(int xrep, int yrep, const std::string label)
void deroule_repertoire_classical_save(int xrep, int yrep, const std::string label)
void do_logical_deroule_repertoire_classical_save(int xrep, int yrep, const std::string label)
int selecteur_PDF_save_solo_global(int xrep, int yrep)
int do_logical_selecteur_PDF_save_solo_global(int xrep, int yrep)
int selecteur_binary_save_solo_global(int xrep, int yrep)
int do_logical_selecteur_binary_save_solo_global(int xrep, int yrep)
int Save_Menu(int xsave, int ysave)
int do_logical_Save_Menu(int xsave, int ysave)
// Source file : save_show_13.cpp =======================================================================================
unsigned int dock_net_size=48*6; //unsigned char DockNetIs[48][6]; // numero Universe artnet(0 à 15)
int valeurs_diverses[32]; //pour stocker petites valeurs en sauvegarde ( pb lecture fp)
void On_Open_name_of_directory()
int get_current_time()
int load_gel_list_numerical()
int Show_report_save_load()
int load_onstart_config()
int load_screen_config()
int load_core_config()
int Save_Core_Config()
int Save_onstart_Config()
int Save_Screen_Config()
int Save_Launchpad_RetroLight()
int Load_Launchpad_RetroLight()
int save_draw_preset_config()
int load_draw_preset_config()
int Save_Arduino_Config()//pas en user mais dans un spectacle
int load_arduino_config()
int Load_Window_Conf()
int Load_Sequenciel_Conf()
int Load_setup_conf()
int Save_setup_conf()
int Save_Plot_Plan_config()
int Load_Plot_Plan_config()
int write_indexes()
int load_indexes()
int load_show_coming_from()
int Save_Window_Conf()
int Load_User_Profile()
int Save_Sequenciel_Conf()
int Save_audiofiles_cues()
int Load_Audio_Conf()
int Save_Audio_Conf()
int Save_Show()
int Load_Show()
int save_the_show(char name_of_show[48])
int load_the_show(char name_of_show[48])
int do_wizard_reload_from_disk()
// Source file : sequentiel_6_core.cpp =======================================================================================
int call_mem_onstage()
int affect_time_from_chrono_to_mem(int mem_to_set_time)
int call_mem_onpreset()
int next_mem_crossfade_finished(int mem_is_now_onstage)
int do_call_time_and_rec_f1_f2_f3(int mem_is)
int do_logical_refresh_vision_memories( int x_seq, int y_seq)
int do_logical_x1_x2(int x_seq,int y_seq)
int do_logical_Sequenciel_Window(int xseq, int yseq,int largeur_seq,int hauteur_seq)
// Source file : sequentiel_7_visu.cpp =======================================================================================
int refresh_vision_memories( int x_seq, int y_seq)
if (MemoiresExistantes[mem_before_one]==1)
if (MemoiresExistantes[position_onstage]==1)
if (MemoiresExistantes[position_preset]==1)
for(int memsearch=position_preset+1; memsearch<10000;memsearch++)
return(0);
int Sequenciel_Window(int xseq, int yseq,int largeur_seq,int hauteur_seq)
// Source file : Serial.cpp =======================================================================================
CSerial::CSerial()
CSerial::~CSerial()
BOOL CSerial::Flush( void )
BOOL CSerial::Open( int nPort, int nBaud )
BOOL CSerial::Close( void )
BOOL CSerial::WriteCommByte( unsigned char ucByte )
int CSerial::SendData( unsigned char * buffer, int size )
int CSerial::ReadDataWaiting( void )
int CSerial::ReadData( void * buffer, int limit )
// Source file : SmoothData.cpp =======================================================================================
SmoothData::SmoothData()
float SmoothData::getdecay()
float SmoothData::getdt()
int SmoothData::getdampermode()
void SmoothData::set_value(int value)
void SmoothData::set_damper_decay(float value)
void SmoothData::set_damper_dt(float value)
void SmoothData::set_damper_mode(int mode)
void SmoothData::set_damper_blocking_mode(bool state)
void SmoothData::set_target_val(int val)
bool SmoothData::calculating()//to know if calculation is done
void SmoothData::fix_all_damper_state_value(int val)
void SmoothData::damper()
float SmoothData::getvalue_dampered()
int SmoothData::getdmxvalue_dampered()
int SmoothData::getdmxvalue()
// Source file : time_core_3.cpp =======================================================================================
int Chrono_PlayPause()
int do_logical_Time_Window(int xtime, int ytime, int timerayon)
// Source file : time_visu_3.cpp =======================================================================================
int print_time_reperes(int the_time_wheel_datatype)//affichage des chiffres sur le tableau de bord
int show_foreground_chrono(int xtime, int ytime)
int Time_Window(int xtime, int ytime, int timerayon)
// Source file : trichro_core2.cpp =======================================================================================
int stock_etat_picker_dans_dockcolor(int dcolor_selected)
int CounterClockWise ( double Pt0_X, double Pt0_Y, double Pt1_X, double Pt1_Y, double Pt2_X, double Pt2_Y )
int do_colors()
int report_gels_to_rvb_trichro(int manufacturer, int gel_position)
int trichro_back_buffer(int xchroma, int ychroma, int rayon, int largeurchroma)//calcul et couleurs dans les 10eme de sec.
int show_who_is_in_dock_color(int dockCol, int couleur)
int do_logical_Interface_Trichromie(int xchroma, int ychroma, int rayon, int largeurchroma)
// Source file : trichro_visu2.cpp =======================================================================================
int Interface_Trichromie(int xchroma, int ychroma, int rayon, int largeurchroma)
// Source file : video_tracking_core.cpp =======================================================================================
int set_default_image_size()
int Load_Video_Conf()
int Save_Video_Conf()
int set_camera_size()
int set_image_caches()
int InitVideo()
int CloseVideo()
int Snap_Background()
int Filter_Image(int xorigin, int yorigin, int largeurRoi, int hauteurRoi)
int do_logical_Move_Tracker(int dock_selected,int tracker_selected)
int do_logical_Edit_Tracker_Size(int dock_selected, int tracker_selected)
int ventilation_video_trackers()
int Trackers()
int do_logical_Set_Filtering_Image()
int show_who_is_in_ROI_as_channel(int roipreset, int dock_tracker_selected)
int do_logical_Interface_video_window(int WindowVideoX,int WindowVideoY)
// Source file : video_tracking_visu.cpp =======================================================================================
int ShowTrackers()
int Set_Filtering_Image()
int tracking_print_to_screen()
int Interface_video_window(int WindowVideoX,int WindowVideoY)
// Source file : wave.cpp =======================================================================================
int fenetre_wave_menus(int x_menus,int y_menus)
int do_logical_fenetre_wave_menus(int x_menus,int y_menus)
// Source file : wizard.cpp =======================================================================================
int clear_wizard_store_ch_in()
int clear_wizard_store_ch_out()
int wizard_store_channel_in()
int wizard_store_channel_out()
int Box_mem_to_mem(int xb, int yb)
int fenetre_wizard(int xb,int yb)
// Source file : wizard_operations.cpp =======================================================================================
int wizard_detect_unused_channels(int wizard_from_mem, int wizard_to_mem)
int wizard_calcul_nbre_de_mem()
int wizard_calcul_nbre_de_mem_deleted()
int wizard_rebuild(int facteur_memoires)
int wizard_clear_transfert_array()
int wizard_clear_mem_original()
int wizard_delete_mem()
int wizard_restore_mem()
int wizard_copy_mem()
int wizard_inspekt_mem()
int wizard_insert_mems()
int wizard_move_mems()
int wizard_reset_to_default_time()
int do_wizard_mem()
int do_wizard_ch()
